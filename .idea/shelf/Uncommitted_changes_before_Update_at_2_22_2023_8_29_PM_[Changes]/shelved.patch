Index: src/main/java/frc/robot/subsystems/ExampleSubsystem.java
===================================================================
diff --git a/src/main/java/frc/robot/subsystems/ExampleSubsystem.java b/src/main/java/frc/robot/subsystems/ExampleSubsystem.java
deleted file mode 100644
--- a/src/main/java/frc/robot/subsystems/ExampleSubsystem.java	(revision b8ad36ffe06fc14133ebcbc9aa22b51f27735f2b)
+++ /dev/null	(revision b8ad36ffe06fc14133ebcbc9aa22b51f27735f2b)
@@ -1,47 +0,0 @@
-// Copyright (c) FIRST and other WPILib contributors.
-// Open Source Software; you can modify and/or share it under the terms of
-// the WPILib BSD license file in the root directory of this project.
-
-package frc.robot.subsystems;
-
-import edu.wpi.first.wpilibj2.command.CommandBase;
-import edu.wpi.first.wpilibj2.command.SubsystemBase;
-
-public class ExampleSubsystem extends SubsystemBase {
-  /** Creates a new ExampleSubsystem. */
-  public ExampleSubsystem() {}
-
-  /**
-   * Example command factory method.
-   *
-   * @return a command
-   */
-  public CommandBase exampleMethodCommand() {
-    // Inline construction of command goes here.
-    // Subsystem::RunOnce implicitly requires `this` subsystem.
-    return runOnce(
-        () -> {
-          /* one-time action goes here */
-        });
-  }
-
-  /**
-   * An example method querying a boolean state of the subsystem (for example, a digital sensor).
-   *
-   * @return value of some boolean subsystem state, such as a digital sensor.
-   */
-  public boolean exampleCondition() {
-    // Query some boolean state, such as a digital sensor.
-    return false;
-  }
-
-  @Override
-  public void periodic() {
-    // This method will be called once per scheduler run
-  }
-
-  @Override
-  public void simulationPeriodic() {
-    // This method will be called once per scheduler run during simulation
-  }
-}
Index: src/main/java/frc/robot/RobotContainer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Copyright (c) FIRST and other WPILib contributors.\r\n// Open Source Software; you can modify and/or share it under the terms of\r\n// the WPILib BSD license file in the root directory of this project.\r\n\r\npackage frc.robot;\r\n\r\nimport frc.robot.Constants.OperatorConstants;\r\nimport frc.robot.commands.Autos;\r\nimport frc.robot.commands.ExampleCommand;\r\nimport frc.robot.subsystems.ExampleSubsystem;\r\nimport edu.wpi.first.wpilibj2.command.Command;\r\nimport edu.wpi.first.wpilibj2.command.button.CommandXboxController;\r\nimport edu.wpi.first.wpilibj2.command.button.Trigger;\r\n\r\n/**\r\n * This class is where the bulk of the robot should be declared. Since Command-based is a\r\n * \"declarative\" paradigm, very little robot logic should actually be handled in the {@link Robot}\r\n * periodic methods (other than the scheduler calls). Instead, the structure of the robot (including\r\n * subsystems, commands, and trigger mappings) should be declared here.\r\n */\r\npublic class RobotContainer {\r\n  // The robot's subsystems and commands are defined here...\r\n  private final ExampleSubsystem m_exampleSubsystem = new ExampleSubsystem();\r\n\r\n  // Replace with CommandPS4Controller or CommandJoystick if needed\r\n  private final CommandXboxController m_driverController =\r\n      new CommandXboxController(OperatorConstants.kDriverControllerPort);\r\n\r\n  /** The container for the robot. Contains subsystems, OI devices, and commands. */\r\n  public RobotContainer() {\r\n    // Configure the trigger bindings\r\n    configureBindings();\r\n  }\r\n\r\n  /**\r\n   * Use this method to define your trigger->command mappings. Triggers can be created via the\r\n   * {@link Trigger#Trigger(java.util.function.BooleanSupplier)} constructor with an arbitrary\r\n   * predicate, or via the named factories in {@link\r\n   * edu.wpi.first.wpilibj2.command.button.CommandGenericHID}'s subclasses for {@link\r\n   * CommandXboxController Xbox}/{@link edu.wpi.first.wpilibj2.command.button.CommandPS4Controller\r\n   * PS4} controllers or {@link edu.wpi.first.wpilibj2.command.button.CommandJoystick Flight\r\n   * joysticks}.\r\n   */\r\n  private void configureBindings() {\r\n    // Schedule `ExampleCommand` when `exampleCondition` changes to `true`\r\n    new Trigger(m_exampleSubsystem::exampleCondition)\r\n        .onTrue(new ExampleCommand(m_exampleSubsystem));\r\n\r\n    // Schedule `exampleMethodCommand` when the Xbox controller's B button is pressed,\r\n    // cancelling on release.\r\n    m_driverController.b().whileTrue(m_exampleSubsystem.exampleMethodCommand());\r\n  }\r\n\r\n  /**\r\n   * Use this to pass the autonomous command to the main {@link Robot} class.\r\n   *\r\n   * @return the command to run in autonomous\r\n   */\r\n  public Command getAutonomousCommand() {\r\n    // An example command will be run in autonomous\r\n    return Autos.exampleAuto(m_exampleSubsystem);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/frc/robot/RobotContainer.java b/src/main/java/frc/robot/RobotContainer.java
--- a/src/main/java/frc/robot/RobotContainer.java	(revision b8ad36ffe06fc14133ebcbc9aa22b51f27735f2b)
+++ b/src/main/java/frc/robot/RobotContainer.java	(date 1675646189466)
@@ -7,8 +7,11 @@
 import frc.robot.Constants.OperatorConstants;
 import frc.robot.commands.Autos;
 import frc.robot.commands.ExampleCommand;
-import frc.robot.subsystems.ExampleSubsystem;
+import frc.robot.subsystems.DriveSubsystem;
 import edu.wpi.first.wpilibj2.command.Command;
+import edu.wpi.first.wpilibj2.command.CommandScheduler;
+import edu.wpi.first.wpilibj2.command.PrintCommand;
+import edu.wpi.first.wpilibj2.command.RepeatCommand;
 import edu.wpi.first.wpilibj2.command.button.CommandXboxController;
 import edu.wpi.first.wpilibj2.command.button.Trigger;
 
@@ -20,7 +23,7 @@
  */
 public class RobotContainer {
   // The robot's subsystems and commands are defined here...
-  private final ExampleSubsystem m_exampleSubsystem = new ExampleSubsystem();
+  private final DriveSubsystem m_exampleSubsystem = new DriveSubsystem();
 
   // Replace with CommandPS4Controller or CommandJoystick if needed
   private final CommandXboxController m_driverController =
@@ -43,12 +46,10 @@
    */
   private void configureBindings() {
     // Schedule `ExampleCommand` when `exampleCondition` changes to `true`
-    new Trigger(m_exampleSubsystem::exampleCondition)
-        .onTrue(new ExampleCommand(m_exampleSubsystem));
-
-    // Schedule `exampleMethodCommand` when the Xbox controller's B button is pressed,
-    // cancelling on release.
-    m_driverController.b().whileTrue(m_exampleSubsystem.exampleMethodCommand());
+    new RepeatCommand(new PrintCommand("It is printing!")).ignoringDisable(true).schedule();
+  }
+  public DriveSubsystem getDriveSubsystem() {
+    return this.m_exampleSubsystem;
   }
 
   /**
Index: src/main/java/frc/robot/Robot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Copyright (c) FIRST and other WPILib contributors.\r\n// Open Source Software; you can modify and/or share it under the terms of\r\n// the WPILib BSD license file in the root directory of this project.\r\n\r\npackage frc.robot;\r\n\r\nimport edu.wpi.first.wpilibj.TimedRobot;\r\nimport edu.wpi.first.wpilibj2.command.Command;\r\nimport edu.wpi.first.wpilibj2.command.CommandScheduler;\r\n\r\n/**\r\n * The VM is configured to automatically run this class, and to call the functions corresponding to\r\n * each mode, as described in the TimedRobot documentation. If you change the name of this class or\r\n * the package after creating this project, you must also update the build.gradle file in the\r\n * project.\r\n */\r\npublic class Robot extends TimedRobot {\r\n  private Command m_autonomousCommand;\r\n\r\n  private RobotContainer m_robotContainer;\r\n\r\n  /**\r\n   * This function is run when the robot is first started up and should be used for any\r\n   * initialization code.\r\n   */\r\n  @Override\r\n  public void robotInit() {\r\n    // Instantiate our RobotContainer.  This will perform all our button bindings, and put our\r\n    // autonomous chooser on the dashboard.\r\n    m_robotContainer = new RobotContainer();\r\n  }\r\n\r\n  /**\r\n   * This function is called every 20 ms, no matter the mode. Use this for items like diagnostics\r\n   * that you want ran during disabled, autonomous, teleoperated and test.\r\n   *\r\n   * <p>This runs after the mode specific periodic functions, but before LiveWindow and\r\n   * SmartDashboard integrated updating.\r\n   */\r\n  @Override\r\n  public void robotPeriodic() {\r\n    // Runs the Scheduler.  This is responsible for polling buttons, adding newly-scheduled\r\n    // commands, running already-scheduled commands, removing finished or interrupted commands,\r\n    // and running subsystem periodic() methods.  This must be called from the robot's periodic\r\n    // block in order for anything in the Command-based framework to work.\r\n    CommandScheduler.getInstance().run();\r\n  }\r\n\r\n  /** This function is called once each time the robot enters Disabled mode. */\r\n  @Override\r\n  public void disabledInit() {}\r\n\r\n  @Override\r\n  public void disabledPeriodic() {}\r\n\r\n  /** This autonomous runs the autonomous command selected by your {@link RobotContainer} class. */\r\n  @Override\r\n  public void autonomousInit() {\r\n    m_autonomousCommand = m_robotContainer.getAutonomousCommand();\r\n\r\n    // schedule the autonomous command (example)\r\n    if (m_autonomousCommand != null) {\r\n      m_autonomousCommand.schedule();\r\n    }\r\n  }\r\n\r\n  /** This function is called periodically during autonomous. */\r\n  @Override\r\n  public void autonomousPeriodic() {}\r\n\r\n  @Override\r\n  public void teleopInit() {\r\n    // This makes sure that the autonomous stops running when\r\n    // teleop starts running. If you want the autonomous to\r\n    // continue until interrupted by another command, remove\r\n    // this line or comment it out.\r\n    if (m_autonomousCommand != null) {\r\n      m_autonomousCommand.cancel();\r\n    }\r\n  }\r\n\r\n  /** This function is called periodically during operator control. */\r\n  @Override\r\n  public void teleopPeriodic() {}\r\n\r\n  @Override\r\n  public void testInit() {\r\n    // Cancels all running commands at the start of test mode.\r\n    CommandScheduler.getInstance().cancelAll();\r\n  }\r\n\r\n  /** This function is called periodically during test mode. */\r\n  @Override\r\n  public void testPeriodic() {}\r\n\r\n  /** This function is called once when the robot is first started up. */\r\n  @Override\r\n  public void simulationInit() {}\r\n\r\n  /** This function is called periodically whilst in simulation. */\r\n  @Override\r\n  public void simulationPeriodic() {}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/frc/robot/Robot.java b/src/main/java/frc/robot/Robot.java
--- a/src/main/java/frc/robot/Robot.java	(revision b8ad36ffe06fc14133ebcbc9aa22b51f27735f2b)
+++ b/src/main/java/frc/robot/Robot.java	(date 1674529653267)
@@ -66,7 +66,9 @@
 
   /** This function is called periodically during autonomous. */
   @Override
-  public void autonomousPeriodic() {}
+  public void autonomousPeriodic() {
+    
+  }
 
   @Override
   public void teleopInit() {
Index: src/main/java/frc/robot/commands/Autos.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Copyright (c) FIRST and other WPILib contributors.\r\n// Open Source Software; you can modify and/or share it under the terms of\r\n// the WPILib BSD license file in the root directory of this project.\r\n\r\npackage frc.robot.commands;\r\n\r\nimport frc.robot.subsystems.ExampleSubsystem;\r\nimport edu.wpi.first.wpilibj2.command.CommandBase;\r\nimport edu.wpi.first.wpilibj2.command.Commands;\r\n\r\npublic final class Autos {\r\n  /** Example static factory for an autonomous command. */\r\n  public static CommandBase exampleAuto(ExampleSubsystem subsystem) {\r\n    return Commands.sequence(subsystem.exampleMethodCommand(), new ExampleCommand(subsystem));\r\n  }\r\n\r\n  private Autos() {\r\n    throw new UnsupportedOperationException(\"This is a utility class!\");\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/frc/robot/commands/Autos.java b/src/main/java/frc/robot/commands/Autos.java
--- a/src/main/java/frc/robot/commands/Autos.java	(revision b8ad36ffe06fc14133ebcbc9aa22b51f27735f2b)
+++ b/src/main/java/frc/robot/commands/Autos.java	(date 1674529437684)
@@ -4,13 +4,13 @@
 
 package frc.robot.commands;
 
-import frc.robot.subsystems.ExampleSubsystem;
+import frc.robot.subsystems.DriveSubsystem;
 import edu.wpi.first.wpilibj2.command.CommandBase;
 import edu.wpi.first.wpilibj2.command.Commands;
 
 public final class Autos {
   /** Example static factory for an autonomous command. */
-  public static CommandBase exampleAuto(ExampleSubsystem subsystem) {
+  public static CommandBase exampleAuto(DriveSubsystem subsystem) {
     return Commands.sequence(subsystem.exampleMethodCommand(), new ExampleCommand(subsystem));
   }
 
Index: src/main/java/frc/robot/commands/ExampleCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Copyright (c) FIRST and other WPILib contributors.\r\n// Open Source Software; you can modify and/or share it under the terms of\r\n// the WPILib BSD license file in the root directory of this project.\r\n\r\npackage frc.robot.commands;\r\n\r\nimport frc.robot.subsystems.ExampleSubsystem;\r\nimport edu.wpi.first.wpilibj2.command.CommandBase;\r\n\r\n/** An example command that uses an example subsystem. */\r\npublic class ExampleCommand extends CommandBase {\r\n  @SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\r\n  private final ExampleSubsystem m_subsystem;\r\n\r\n  /**\r\n   * Creates a new ExampleCommand.\r\n   *\r\n   * @param subsystem The subsystem used by this command.\r\n   */\r\n  public ExampleCommand(ExampleSubsystem subsystem) {\r\n    m_subsystem = subsystem;\r\n    // Use addRequirements() here to declare subsystem dependencies.\r\n    addRequirements(subsystem);\r\n  }\r\n\r\n  // Called when the command is initially scheduled.\r\n  @Override\r\n  public void initialize() {}\r\n\r\n  // Called every time the scheduler runs while the command is scheduled.\r\n  @Override\r\n  public void execute() {}\r\n\r\n  // Called once the command ends or is interrupted.\r\n  @Override\r\n  public void end(boolean interrupted) {}\r\n\r\n  // Returns true when the command should end.\r\n  @Override\r\n  public boolean isFinished() {\r\n    return false;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/frc/robot/commands/ExampleCommand.java b/src/main/java/frc/robot/commands/ExampleCommand.java
--- a/src/main/java/frc/robot/commands/ExampleCommand.java	(revision b8ad36ffe06fc14133ebcbc9aa22b51f27735f2b)
+++ b/src/main/java/frc/robot/commands/ExampleCommand.java	(date 1675646036496)
@@ -4,20 +4,20 @@
 
 package frc.robot.commands;
 
-import frc.robot.subsystems.ExampleSubsystem;
+import frc.robot.subsystems.DriveSubsystem;
 import edu.wpi.first.wpilibj2.command.CommandBase;
 
 /** An example command that uses an example subsystem. */
 public class ExampleCommand extends CommandBase {
   @SuppressWarnings({"PMD.UnusedPrivateField", "PMD.SingularField"})
-  private final ExampleSubsystem m_subsystem;
+  private final DriveSubsystem m_subsystem;
 
   /**
    * Creates a new ExampleCommand.
    *
    * @param subsystem The subsystem used by this command.
    */
-  public ExampleCommand(ExampleSubsystem subsystem) {
+  public ExampleCommand(DriveSubsystem subsystem) {
     m_subsystem = subsystem;
     // Use addRequirements() here to declare subsystem dependencies.
     addRequirements(subsystem);
@@ -29,7 +29,9 @@
 
   // Called every time the scheduler runs while the command is scheduled.
   @Override
-  public void execute() {}
+  public void execute() {
+    
+  }
 
   // Called once the command ends or is interrupted.
   @Override
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id \"java\"\r\n    id \"edu.wpi.first.GradleRIO\" version \"2023.1.1\"\r\n}\r\n\r\nsourceCompatibility = JavaVersion.VERSION_11\r\ntargetCompatibility = JavaVersion.VERSION_11\r\n\r\ndef ROBOT_MAIN_CLASS = \"frc.robot.Main\"\r\n\r\n// Define my targets (RoboRIO) and artifacts (deployable files)\r\n// This is added by GradleRIO's backing project DeployUtils.\r\ndeploy {\r\n    targets {\r\n        roborio(getTargetTypeClass('RoboRIO')) {\r\n            // Team number is loaded either from the .wpilib/wpilib_preferences.json\r\n            // or from command line. If not found an exception will be thrown.\r\n            // You can use getTeamOrDefault(team) instead of getTeamNumber if you\r\n            // want to store a team number in this file.\r\n            team = project.frc.getTeamNumber()\r\n            debug = project.frc.getDebugOrDefault(false)\r\n\r\n            artifacts {\r\n                // First part is artifact name, 2nd is artifact type\r\n                // getTargetTypeClass is a shortcut to get the class type using a string\r\n\r\n                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {\r\n                }\r\n\r\n                // Static files artifact\r\n                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {\r\n                    files = project.fileTree('src/main/deploy')\r\n                    directory = '/home/lvuser/deploy'\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndef deployArtifact = deploy.targets.roborio.artifacts.frcJava\r\n\r\n// Set to true to use debug for JNI.\r\nwpi.java.debugJni = false\r\n\r\n// Set this to true to enable desktop support.\r\ndef includeDesktopSupport = false\r\n\r\n// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.\r\n// Also defines JUnit 5.\r\ndependencies {\r\n    implementation wpi.java.deps.wpilib()\r\n    implementation wpi.java.vendor.java()\r\n\r\n    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)\r\n    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)\r\n\r\n    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)\r\n    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)\r\n\r\n    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)\r\n    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)\r\n    simulationDebug wpi.sim.enableDebug()\r\n\r\n    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)\r\n    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)\r\n    simulationRelease wpi.sim.enableRelease()\r\n\r\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'\r\n    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'\r\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'\r\n}\r\n\r\ntest {\r\n    useJUnitPlatform()\r\n    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'\r\n}\r\n\r\n// Simulation configuration (e.g. environment variables).\r\nwpi.sim.addGui().defaultEnabled = true\r\nwpi.sim.addDriverstation()\r\n\r\n// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')\r\n// in order to make them all available at runtime. Also adding the manifest so WPILib\r\n// knows where to look for our Robot Class.\r\njar {\r\n    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }\r\n    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)\r\n    duplicatesStrategy = DuplicatesStrategy.INCLUDE\r\n}\r\n\r\n// Configure jar and deploy tasks\r\ndeployArtifact.jarTask = jar\r\nwpi.java.configureExecutableTasks(jar)\r\nwpi.java.configureTestTasks(test)\r\n\r\n// Configure string concat to always inline compile\r\ntasks.withType(JavaCompile) {\r\n    options.compilerArgs.add '-XDstringConcat=inline'\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision b8ad36ffe06fc14133ebcbc9aa22b51f27735f2b)
+++ b/build.gradle	(date 1675645941081)
@@ -1,6 +1,6 @@
 plugins {
     id "java"
-    id "edu.wpi.first.GradleRIO" version "2023.1.1"
+    id "edu.wpi.first.GradleRIO" version "2023.3.1"
 }
 
 sourceCompatibility = JavaVersion.VERSION_11
